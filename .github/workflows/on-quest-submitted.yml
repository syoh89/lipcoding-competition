name: On Issue Submitted

on:
  issues:
    types:
      - opened
  workflow_dispatch:
    inputs:
      issue-number:
        description: "Issue number"
        required: true

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  verify-issue:
    name: "Verify Issue Submitted"

    runs-on: ubuntu-latest

    steps:
      - name: Check event payload - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: pwsh
        run: |
          $eventPayload = '${{ toJson(github) }}'
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force

      - name: Check event payload - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $eventPayload = gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue-number }}
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Checkout quest checker repository
        uses: actions/checkout@v4
        with:
          repository: lipcoding-kr/lipcoding-competition-tests
          path: quest-checker
          token: ${{ secrets.GH_PAT }}

      - name: Verify issue - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: bash
        run: |
          pushd ./quest-checker

          dotnet run --project ./LipCoding.IssueVerificationApp -- \
            --input "${{ github.workspace }}/payload.json" \
            --output "${{ github.workspace }}/issue.json" \
            --due-date "${{ vars.DUE_DATE }}"
          
          popd

      - name: Verify issue - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          pushd ./quest-checker

          dotnet run --project ./LipCoding.IssueVerificationApp -- \
            --input "${{ github.workspace }}/payload.json" \
            --output "${{ github.workspace }}/issue.json" \
            --due-date "${{ vars.DUE_DATE }}" \
            --workflow-dispatch

          popd

      - name: Check validation result
        id: issue
        shell: pwsh
        run: |
          $result = Get-Content "${{ github.workspace }}/issue.json" | ConvertFrom-Json

          $tzi = [TimeZoneInfo]::FindSystemTimeZoneById("Asia/Seoul")

          echo "issueNumber=$($result.number)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "githubId=$($result.createdBy)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "submittedAt=$([TimeZoneInfo]::ConvertTime($result.createdAt, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "dueBy=$([TimeZoneInfo]::ConvertTime($result.dueDate, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "githubId=$($result.createdBy)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "isValid=$($result.isValid)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "invalidReasons=$('<ul><li> ' + $($result.invalidReasons -join '</li><li> ') + '</li></ul>')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      - name: Add a label - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "invalid" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            üëãüèº @${{ steps.issue.outputs.githubId }} Îãò!

            Ïï±ÏùÑ Ï†úÏ∂úÌï¥ Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§! üéâ

            - Ïï± Ï†úÏ∂ú ÏãúÍ∞Å: ${{ steps.issue.outputs.submittedAt }}
            - Ïï± Ï†úÏ∂ú ÎßàÍ∞ê ÏãúÍ∞Å: ${{ steps.issue.outputs.dueBy }}

            ÌïòÏßÄÎßå Ï†úÏ∂úÌïòÏã† Ïï±ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏùÄ Ïù¥Ïú†Î°ú Ïù∏Ìï¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. üò¢

            ${{ steps.issue.outputs.invalidReasons }}

      - name: Close issue - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "Ï†úÏ∂úÌïú Ïï±Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Ïù¥ÏäàÎ•º Îã´ÏäµÎãàÎã§." \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Acknowledge
        if: |
          steps.issue.outputs.isValid == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          emoji: "+1,rocket"
          body: |
            üëãüèº @${{ steps.issue.outputs.githubId }} Îãò!

            Ïï±ÏùÑ Ï†úÏ∂úÌï¥ Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§! üéâ

            - Ïï± Ï†úÏ∂ú ÏãúÍ∞Å: ${{ steps.issue.outputs.submittedAt }}
            - Ïï± Ï†úÏ∂ú ÎßàÍ∞ê ÏãúÍ∞Å: ${{ steps.issue.outputs.dueBy }}

            Ï†úÏ∂úÌïòÏã† Ïï±ÏùÄ ÌòÑÏû¨ ÌÖåÏä§Ìä∏ Ï§ëÏù¥Î©∞, ÌÖåÏä§Ìä∏ ÌÜµÍ≥º Ïó¨Î∂ÄÎ•º Îã§Ïãú ÏïåÎ†§ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.

            üëâ [Ïï± ÌÖåÏä§Ìä∏ ÏßÑÌñâÍ≥ºÏ†ï ÌôïÏù∏ÌïòÍ∏∞](../actions/runs/${{ github.run_id }}) üëà
            
            > **Ï∞∏Í≥†**: Ï†úÏ∂úÌïòÏã† Ïï±Ïùò Í∑úÎ™®Ïóê Îî∞Îùº ÌÖåÏä§Ìä∏Î•º Í±∞Ï≥ê ÌôïÏù∏ÌïòÎäî Îç∞ ÏãúÍ∞ÑÏù¥ Í±∏Î¶¥ Ïàò ÏûàÏäµÎãàÎã§. ‚è≥

      - name: Upload issue payload
        if: |
          steps.issue.outputs.isValid == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: issue-payload
          path: '${{ github.workspace }}/issue.json'

  test-apps:
    name: "Test App Submitted"

    needs:
      - verify-issue

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download issue payload
        uses: actions/download-artifact@v4
        with:
          name: issue-payload

      - name: Check issue payload
        shell: bash
        run: |
          ls -al ${{ github.workspace }}

          cat "${{ github.workspace }}/issue.json"

      - name: Get app details
        id: issue
        shell: pwsh
        run: |
          $issue = Get-Content "${{ github.workspace }}/issue.json" | ConvertFrom-Json

          $tzi = [TimeZoneInfo]::FindSystemTimeZoneById("Asia/Seoul")

          echo "name=$($issue.body.participantName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "issueNumber=$($issue.number)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "submittedAt=$([TimeZoneInfo]::ConvertTime($issue.createdAt, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "submittedAtShort=$([TimeZoneInfo]::ConvertTime($issue.createdAt, $tzi).ToString("HH:mm:ss"))" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "githubId=$($issue.body.gitHubHandle)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "repository=$($issue.body.gitHubRepository)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "screenshot=$($issue.body.screenshotUrl)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "video=$($issue.body.promotionVideoUrl)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "frontend=$($issue.body.frontendAppPath)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "backend=$($issue.body.backendAppPath)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "frontendCommand=$($issue.body.frontendAppRunCommand)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "backendCommand=$($issue.body.backendAppRunCommand)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "swaggerUIUrl=$($issue.body.swaggerUIUrl)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "openAPIUrl=$($issue.body.openAPIUrl)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Checkout quest checker repository
        uses: actions/checkout@v4
        with:
          repository: lipcoding-kr/lipcoding-competition-tests
          path: quest-checker
          token: ${{ secrets.GH_PAT }}

      - name: Checkout app repository
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          repository: ${{ steps.issue.outputs.repository }}
          path: app
          token: ${{ secrets.GH_PAT }}

      - name: Close issue - Invalid repository
        if: failure()
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "invalid" \
            -R ${{ github.event.repository.full_name }}

          gh issue comment ${{ steps.issue.outputs.issueNumber }} \
            -b "Ï†úÏ∂úÌïú Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§." \
            -R ${{ github.event.repository.full_name }}

          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "Ï†úÏ∂úÌïú Ïï±Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Ïù¥ÏäàÎ•º Îã´ÏäµÎãàÎã§." \
            -R ${{ github.event.repository.full_name }}

          exit 1
      
      - name: Check app structure
        id: check-structure
        shell: pwsh
        run: |
          $frontendAppPath = "${{ github.workspace }}/app/${{ steps.issue.outputs.frontend }}"
          $backendAppPath = "${{ github.workspace }}/app/${{ steps.issue.outputs.backend }}"

          $validFrontend = $true
          $validBackend = $true

          if (-not (Test-Path -Path $frontendAppPath)) {
            Write-Output "Frontend app path '$frontendAppPath' does not exist."
            $validFrontend = $false
          }

          if (-not (Test-Path -Path $backendAppPath)) {
            Write-Output "Backend app path '$backendAppPath' does not exist."
            $validBackend = $false
          }

          echo "isValid=$($validFrontend -and $validBackend)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      - name: Add a label - Invalid
        if: |
          steps.check-structure.outputs.isValid == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "invalid" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Invalid
        if: |
          steps.check-structure.outputs.isValid == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            üëãüèº @${{ steps.issue.outputs.githubId }} Îãò!

            ÏßÄÏ†ïÌïú Í≤ΩÎ°úÏóêÏÑú ÌîÑÎ°†Ìä∏ÏóîÎìú Ïï± ÎòêÎäî Î∞±ÏóîÎìú Ïï±ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. üò¢ Í≤ΩÎ°úÎ•º Îã§Ïãú Ìïú Î≤à ÌôïÏù∏ÌïòÏÑ∏Ïöî.

      - name: Close issue - Invalid
        if: |
          steps.check-structure.outputs.isValid == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "Ï†úÏ∂úÌïú Ïï±Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Ïù¥ÏäàÎ•º Îã´ÏäµÎãàÎã§." \
            -R ${{ github.event.repository.full_name }}

      - name: Fail the job - Invalid structure
        if: |
          steps.check-structure.outputs.isValid == 'false'
        shell: bash
        run: |
          echo "The structure of the submitted app is invalid. Please check the paths and try again."
          exit 1

      - name: Run backend app
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pushd "${{ github.workspace }}/app/${{ steps.issue.outputs.backend }}"

          eval "${{ steps.issue.outputs.backendCommand }}"

          popd

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if nc -z localhost 8080; then
              echo "Backend is up!"
              break
            fi
            echo "Waiting for backend..."
            sleep 2
          done

      # - name: Run frontend app
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     pushd "${{ github.workspace }}/app/${{ steps.issue.outputs.frontend }}"

      #     eval "${{ steps.issue.outputs.frontendCommand }}"

      #     popd

      # - name: Wait for frontend to be ready
      #   run: |
      #     for i in {1..30}; do
      #       if nc -z localhost 3000; then
      #         echo "Frontend is up!"
      #         break
      #       fi
      #       echo "Waiting for frontend..."
      #       sleep 2
      #     done

      - name: Set up test environment
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pushd ./quest-checker

          $appsettings = Get-Content -Path ./LipCoding.BackendTests/appsettings.json -Raw | ConvertFrom-Json
          $appsettings.ApiSettings.SwaggerUIUrl = "http://localhost:8080/${{ steps.issue.outputs.swaggerUIUrl }}"
          $appsettings.ApiSettings.OpenApiDocumentUrl = "http://localhost:8080/${{ steps.issue.outputs.openAPIUrl }}"

          $appsettings | ConvertTo-Json -Depth 100 | Out-File -FilePath ./LipCoding.BackendTests/appsettings.json -Encoding utf8 -Force

          popd

      - name: Build test apps
        shell: bash
        run: |
          pushd ./quest-checker

          dotnet restore && dotnet build

          popd

      - name: Install Playwright
        shell: bash
        run: |
          pushd ./quest-checker

          pwsh ./LipCoding.FrontendTests/bin/Debug/net9.0/playwright.ps1 install

          popd

      - name: Run tests - Backend
        shell: bash
        continue-on-error: true
        run: |
          pushd ./quest-checker

          dotnet test ./LipCoding.BackendTests --logger "trx;LogFileName=test-results-backend.trx" --no-build

          popd

      # - name: Run tests - Frontend
      #   shell: bash
      #   continue-on-error: true
      #   run: |
      #     pushd ./quest-checker

      #     dotnet test ./LipCoding.FrontendTests --logger "trx;LogFileName=test-results-frontend.trx" --no-build

      #     popd

      - name: Check the test results
        id: test-results
        shell: pwsh
        run: |
          pushd ./quest-checker

          $files = Get-ChildItem *.trx -Recurse | Select-Object -Property FullName

          $result = ./gha-scripts/Check-UnitTestResults.ps1 -FilePaths $files.FullName
          $message = if ($result -eq $true) { "Test passed" } else { "Test NOT passed" }

          echo "passed=$($result.ToString().ToLowerInvariant())" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "message=$message" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          popd

      - name: Add a label - Test Failed
        if: |
          steps.test-results.outputs.passed == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "failed" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Test Failed
        if: |
          steps.test-results.outputs.passed == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            üëãüèº @${{ steps.issue.outputs.githubId }} Îãò!

            Ï†úÏ∂úÌïòÏã† Ïï±Ïù¥ ÌÖåÏä§Ìä∏Î•º ÌÜµÍ≥ºÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ Îã§Ïãú Ìïú Î≤à ÌôïÏù∏ÌïòÍ≥†, Ïï±ÏùÑ ÏàòÏ†ïÌïú ÌõÑ Îã§Ïãú Ï†úÏ∂úÌï¥ Ï£ºÏÑ∏Ïöî. üò¢

            üëâ [Ïï± ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÌôïÏù∏ÌïòÍ∏∞](../actions/runs/${{ github.run_id }}) üëà

      - name: Close issue - Test Failed
        if: |
          steps.test-results.outputs.passed == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "Ï†úÏ∂úÌïú Ïï±Ïù¥ ÌÖåÏä§Ìä∏Î•º ÌÜµÍ≥ºÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. Ïù¥ÏäàÎ•º Îã´ÏäµÎãàÎã§." \
            -R ${{ github.event.repository.full_name }}

      - name: Add a label - Test Passed
        if: |
          steps.test-results.outputs.passed == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "passed" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Test Passed
        if: |
          steps.test-results.outputs.passed == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            üëãüèº @${{ steps.issue.outputs.githubId }} Îãò!

            Ï†úÏ∂úÌïòÏã† Ïï±Ïù¥ ÌÖåÏä§Ìä∏Î•º ÌÜµÍ≥ºÌñàÏäµÎãàÎã§. ÏàòÍ≥†ÌïòÏÖ®ÏäµÎãàÎã§! üéâ

            üëâ [Î≥∏ÏÑ† ÏßÑÏ∂úÏûê Î™ÖÎã® Î≥¥Í∏∞](../blob/main/hall-of-fame.md) üëà

      - name: Update Hall of Fame
        if: |
          steps.test-results.outputs.passed == 'true'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $submittedAt = "${{ steps.issue.outputs.submittedAt }}".Replace("-", "%2F").Replace(' ', '%20').Replace("+", "%2B").Replace(':', '%3A')
          $submittedAtShort = "${{ steps.issue.outputs.submittedAtShort }}".Replace("-", "%2F").Replace(' ', '%20').Replace("+", "%2B").Replace(':', '%3A')

          $hallOfFame = Get-Content -Path ./hall-of-fame.md -Raw
          $hallOfFame += "| ${{ steps.issue.outputs.name }} "
          $hallOfFame += "| [@${{ steps.issue.outputs.githubId }}](https://github.com/${{ steps.issue.outputs.githubId }}) "
          $hallOfFame += "| [${{ steps.issue.outputs.repository }}](https://github.com/${{ steps.issue.outputs.repository }}) "
          $hallOfFame += "| [${{ steps.issue.outputs.video }}](${{ steps.issue.outputs.video }}) "
          $hallOfFame += "| <img src=`"https://img.shields.io/badge/$($submittedAt)-blue`" alt=`"Ï†úÏ∂úÏãúÍ∞Å: ${{ steps.issue.outputs.submittedAt }}`" /> |`n"
          $hallOfFame | Out-File -FilePath ./hall-of-fame.md -Encoding utf8 -Force

          $readme = Get-Content -Path ./README.md -Raw
          $readme += "| ${{ steps.issue.outputs.name }} "
          $readme += "| [@${{ steps.issue.outputs.githubId }}](https://github.com/${{ steps.issue.outputs.githubId }}) "
          $readme += "| [${{ steps.issue.outputs.repository }}](https://github.com/${{ steps.issue.outputs.repository }}) "
          $readme += "| [${{ steps.issue.outputs.video }}](${{ steps.issue.outputs.video }}) "
          $readme += "| <img src=`"https://img.shields.io/badge/$($submittedAtShort)-blue`" alt=`"Ï†úÏ∂úÏãúÍ∞Å: ${{ steps.issue.outputs.submittedAt }}`" /> |`n"
          $readme | Out-File -FilePath ./README.md -Encoding utf8 -Force

          git config --global user.name "LipCoding Bot"
          git config --global user.email "<lipcoding-bot@users.noreply.github.com>"

          git add ./hall-of-fame.md ./README.md
          git commit -m "Ïï± Ï†úÏ∂úÏûê Î™ÖÎã® ÏóÖÎç∞Ïù¥Ìä∏ - ${{ steps.issue.outputs.name }}(@${{ steps.issue.outputs.githubId }})"
          git push origin main

      - name: Close issue - Test Passed
        if: |
          steps.test-results.outputs.passed == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "Ï†úÏ∂úÌïú Ïï±Ïù¥ ÌÖåÏä§Ìä∏Î•º ÌÜµÍ≥ºÌñàÏäµÎãàÎã§. Ïù¥ÏäàÎ•º Îã´ÏäµÎãàÎã§." \
            -R ${{ github.event.repository.full_name }}

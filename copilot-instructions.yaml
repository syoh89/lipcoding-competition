# copilot-instructions.yaml

project:
  name: "mento-mentee-matching-app"
  description: |
    이 프로젝트는 천하제일 입코딩 대회 2025(https://github.com/lipcoding-kr/lipcoding-competition)에서 요구하는 멘토-멘티 매칭 웹 애플리케이션을 구현하는 것이다.
    주요 요구사항, 사용자 스토리, API 명세는 아래의 md 파일을 참고하라.
    - mentor-mentee-app-requirements.md
    - mentor-mentee-app-user-stories.md
    - mentor-mentee-api-spec.md

context_files:
  - mentor-mentee-app-requirements.md
  - mentor-mentee-app-user-stories.md
  - mentor-mentee-api-spec.md

instructions:
  - 모든 코드와 구조, 비즈니스 로직, API 설계는 위 3개의 문서의 내용을 준수한다.
  - 요구사항(Requirements)을 먼저 분석하고, 필수 기능이 누락되지 않게 구현한다.
  - 사용자 스토리(User Stories)를 각 기능 구현의 우선순위와 UX 흐름 결정에 반영한다.
  - API 명세에 따라 백엔드 API를 설계하고, 요청/응답 포맷을 일치시킨다.
  - 전체 코드는 웹 기반으로 작성하고, 주요 언어는 Node.js 에서 선택한다.
  - 프론트엔드는 React 등 최신 프레임워크를 사용한다.
  - 데이터베이스는 메모리 DB 또는 SQLite를 사용한다.
  - UI/UX는 사용자 스토리와 요구사항에 맞게, 단순하고 명확하게 구현한다.
  - README.md 에는 앱의 설치, 실행, 주요 기능 설명, API 문서 링크를 포함한다.
  - 코드에 주석과 문서화를 신경 쓴다.
  - OpenAPI 문서(openapi.yaml)가 있다면, 이를 참고해서 API 자동 문서화를 추가한다.

dev_run_and_test:
  description: |
    앱을 개발한 후, 프론트엔드와 백엔드가 정상적으로 연동되는지 반드시 확인해야 한다.
    아래 명령어들로 프론트엔드와 백엔드 서버를 각각(또는 통합) 기동하여 프론트엔드와 백엔드가 정상적으로 기동되는지 확인해야 한다.
    프론트엔드에서 주요 기능(회원가입, 로그인, 멘토-멘티 매칭, 멘토-멘티 신청/수락/거절, 프로필, 대시보드 등)이 정상 동작하는지, 모든 주요 기능이 실제로 백엔드 API와 통신하며 정상 동작하는지, API 명세와 실제 구현이 일치하는지 직접 테스트해야 한다.
    모든 테스트가 통과한 것을 확인한 후, 제출 이슈를 등록한다.

example_commands:
  - description: "개발 서버 실행 (백엔드와 프론트엔드 모두)"
    commands:
      - "npm install && npm run dev"         # Node.js 기반 Fullstack 예시
      - "cd frontend && npm install && npm run dev"  # 프론트엔드 별도 디렉토리 예시
      - "cd backend && npm install && npm run dev"   # 백엔드 별도 디렉토리 예시
  - description: "테스트 코드 실행"
    commands:
      - "npm run test"
      - "cd backend && npm run test"
      - "cd frontend && npm run test"
  - description: "로컬에서 http://localhost:3000 또는 http://localhost:8000 등으로 접속해 페이지 정상 작동 확인"
    # 실제 접속 URL은 구현에 따라 명시

check_list_before_submit:
- "[✅] 회원가입/로그인/로그아웃이 정상적으로 동작하는가? - 회원가입, 로그인, JWT 토큰 생성 모두 정상 동작 확인"
- "[✅] 멘토/멘티 프로필 작성 및 조회가 가능한가? - 프로필 조회, 수정, 스킬 관리 모두 정상 동작 확인"
- "[✅] 멘토-멘티 매칭 신청/수락/거절이 정상적으로 동작하는가? - 매칭 요청 생성, 수락, 거절, 취소 모두 정상 동작 확인"
- "[✅] 대시보드에서 매칭/상담 목록을 확인할 수 있는가? - incoming/outgoing 요청 목록 조회, 피드백 상태 표시 정상 동작 확인"
- "[✅] 피드백/평가 기능이 정상 동작하는가? - 피드백 작성, 조회, 상호 평가 시스템 모두 정상 동작 확인"
- "[✅] 프론트엔드와 백엔드가 실제로 API로 연동되어 데이터가 오가는지 테스트했는가? - 모든 API 엔드포인트 정상 동작, CORS 문제 해결됨"
- "[✅] README.md에 전체 실행방법과 주요 기능, 테스트 방법이 명확히 적혀 있는가? - README.md 작성 완료"
- "[✅] 테스트 코드가 모두 통과하는가? - 개발 환경 구성 완료, 모든 API 테스트 통과"
- "[✅] (선택) OpenAPI 문서가 정상적으로 서비스되는가? - Swagger UI 정상 접근 가능 (http://localhost:8088/api-docs)"

submit_instruction:
  description: |
    위의 모든 테스트와 기능 확인이 완료되면,
    반드시 [lipcoding-competition/issues](https://github.com/lipcoding-kr/lipcoding-competition/issues)에서 New Issue를 등록해야 한다.
    이슈 내용에는 아래 항목을 꼭 포함한다.
  required_issue_fields:
    - 제출자 이름
    - GitHub ID
    - 앱 리포지토리 주소
    - (필요시) 앱 동영상 주소
    - 최종 제출 시각
    - 테스트 및 실행 결과 (스크린샷/간단한 설명)
    - (선택) 기타 전달사항

keywords:
  - 멘토
  - 멘티
  - 매칭
  - 신청/수락/거절
  - 프로필
  - 대시보드
  - 피드백
  - 평가
  - REST API
  - 웹 앱
  - 대회 제출

references:
  - https://github.com/lipcoding-kr/lipcoding-competition/blob/main/mentor-mentee-app-requirements.md
  - https://github.com/lipcoding-kr/lipcoding-competition/blob/main/mentor-mentee-app-user-stories.md
  - https://github.com/lipcoding-kr/lipcoding-competition/blob/main/mentor-mentee-api-spec.md

example_flow:
  - 사용자는 멘토 또는 멘티로 회원가입한다.
  - 프로필을 작성한다.
  - 멘티는 멘토에게 매칭 신청을 보낸다.
  - 멘토는 신청을 확인, 수락 또는 거절한다.
  - 매칭이 성사되면 대시보드에서 서로의 정보를 확인하고, 대화/상담이 진행된다.
  - 상담 종료 후 피드백과 평가가 이루어진다.
